
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "IF THEN ELSE TO BOOL VAR ZERO SUC PRED IS_ZERO TBOOL TNAT LAMBDAexp : app exp : IF exp THEN exp ELSE exp exp : LAMBDA VAR ':' type '.' exp app : app term app : term term : nat\n          | bool\n          | VAR nat : ZEROnat : SUC '(' exp ')' nat : PRED '(' exp ')' bool : BOOLbool : IS_ZERO '(' exp ')' term : '(' exp ')' type : atype type : atype TO type atype : TBOOL\n           | TNAT atype : '(' type ')' "
    
_lr_action_items = {'THEN':([1,3,5,7,8,11,12,17,20,23,28,29,30,41,44,],[-5,-6,-1,-9,-7,-8,-12,-4,26,-14,-10,-13,-11,-2,-3,]),':':([21,],[27,]),'SUC':([0,1,3,4,5,7,8,11,12,13,15,17,18,19,23,26,28,29,30,37,40,],[2,-5,-6,2,2,-9,-7,-8,-12,2,2,-4,2,2,-14,2,-10,-13,-11,2,2,]),')':([1,3,5,7,8,11,12,16,17,22,23,24,25,28,29,30,33,34,35,38,41,42,43,44,],[-5,-6,-1,-9,-7,-8,-12,23,-4,28,-14,29,30,-10,-13,-11,-15,-18,-17,42,-2,-19,-16,-3,]),'(':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,17,18,19,23,26,27,28,29,30,32,37,39,40,],[4,-5,15,-6,4,4,18,-9,-7,19,-8,-12,4,4,-4,4,4,-14,4,32,-10,-13,-11,32,4,32,4,]),'ELSE':([1,3,5,7,8,11,12,17,23,28,29,30,31,41,44,],[-5,-6,-1,-9,-7,-8,-12,-4,-14,-10,-13,-11,37,-2,-3,]),'TO':([33,34,35,42,],[39,-18,-17,-19,]),'ZERO':([0,1,3,4,5,7,8,11,12,13,15,17,18,19,23,26,28,29,30,37,40,],[7,-5,-6,7,7,-9,-7,-8,-12,7,7,-4,7,7,-14,7,-10,-13,-11,7,7,]),'BOOL':([0,1,3,4,5,7,8,11,12,13,15,17,18,19,23,26,28,29,30,37,40,],[12,-5,-6,12,12,-9,-7,-8,-12,12,12,-4,12,12,-14,12,-10,-13,-11,12,12,]),'TNAT':([27,32,39,],[34,34,34,]),'IS_ZERO':([0,1,3,4,5,7,8,11,12,13,15,17,18,19,23,26,28,29,30,37,40,],[6,-5,-6,6,6,-9,-7,-8,-12,6,6,-4,6,6,-14,6,-10,-13,-11,6,6,]),'PRED':([0,1,3,4,5,7,8,11,12,13,15,17,18,19,23,26,28,29,30,37,40,],[10,-5,-6,10,10,-9,-7,-8,-12,10,10,-4,10,10,-14,10,-10,-13,-11,10,10,]),'VAR':([0,1,3,4,5,7,8,11,12,13,14,15,17,18,19,23,26,28,29,30,37,40,],[11,-5,-6,11,11,-9,-7,-8,-12,11,21,11,-4,11,11,-14,11,-10,-13,-11,11,11,]),'TBOOL':([27,32,39,],[35,35,35,]),'LAMBDA':([0,4,13,15,18,19,26,37,40,],[14,14,14,14,14,14,14,14,14,]),'.':([33,34,35,36,42,43,],[-15,-18,-17,40,-19,-16,]),'$end':([1,3,5,7,8,9,11,12,17,23,28,29,30,41,44,],[-5,-6,-1,-9,-7,0,-8,-12,-4,-14,-10,-13,-11,-2,-3,]),'IF':([0,4,13,15,18,19,26,37,40,],[13,13,13,13,13,13,13,13,13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term':([0,4,5,13,15,18,19,26,37,40,],[1,1,17,1,1,1,1,1,1,1,]),'nat':([0,4,5,13,15,18,19,26,37,40,],[3,3,3,3,3,3,3,3,3,3,]),'app':([0,4,13,15,18,19,26,37,40,],[5,5,5,5,5,5,5,5,5,]),'atype':([27,32,39,],[33,33,33,]),'bool':([0,4,5,13,15,18,19,26,37,40,],[8,8,8,8,8,8,8,8,8,8,]),'exp':([0,4,13,15,18,19,26,37,40,],[9,16,20,22,24,25,31,41,44,]),'type':([27,32,39,],[36,38,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> exp","S'",1,None,None,None),
  ('exp -> app','exp',1,'p_exp_app','parser.py',15),
  ('exp -> IF exp THEN exp ELSE exp','exp',6,'p_exp_if','parser.py',19),
  ('exp -> LAMBDA VAR : type . exp','exp',6,'p_exp_abs','parser.py',23),
  ('app -> app term','app',2,'p_app','parser.py',27),
  ('app -> term','app',1,'p_app_term','parser.py',31),
  ('term -> nat','term',1,'p_term_base','parser.py',35),
  ('term -> bool','term',1,'p_term_base','parser.py',36),
  ('term -> VAR','term',1,'p_term_base','parser.py',37),
  ('nat -> ZERO','nat',1,'p_nat_zero','parser.py',41),
  ('nat -> SUC ( exp )','nat',4,'p_nat_suc','parser.py',45),
  ('nat -> PRED ( exp )','nat',4,'p_nat_pred','parser.py',49),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',53),
  ('bool -> IS_ZERO ( exp )','bool',4,'p_bool_iszero','parser.py',57),
  ('term -> ( exp )','term',3,'p_term_exp','parser.py',61),
  ('type -> atype','type',1,'p_type_atype','parser.py',65),
  ('type -> atype TO type','type',3,'p_type_to','parser.py',69),
  ('atype -> TBOOL','atype',1,'p_atype_base','parser.py',73),
  ('atype -> TNAT','atype',1,'p_atype_base','parser.py',74),
  ('atype -> ( type )','atype',3,'p_atype_type','parser.py',78),
]
