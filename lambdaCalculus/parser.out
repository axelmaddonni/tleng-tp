Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    TO
    TNAT
    TBOOL
    VAR
    IS_ZERO

Grammar

Rule 0     S' -> n
Rule 1     n -> NUM
Rule 2     n -> SUC ( n )
Rule 3     n -> PRED ( n )
Rule 4     b -> BOOL
Rule 5     term -> IF BOOL THEN term ELSE term

Terminals, with rules where they appear

(                    : 2 3
)                    : 2 3
BOOL                 : 4 5
ELSE                 : 5
IF                   : 5
IS_ZERO              : 
NUM                  : 1
PRED                 : 3
SUC                  : 2
TBOOL                : 
THEN                 : 5
TNAT                 : 
TO                   : 
VAR                  : 
error                : 

Nonterminals, with rules where they appear

b                    : 
n                    : 2 3 0
term                 : 5 5

       : 2 3 5 0
term                 : 7 7

Parsing method: LALR

state 0

    (0) S' -> . n
    (1) n -> . NUM
    (2) n -> . SUC ( n )
    (3) n -> . PRED ( n )

    NUM             shift and go to state 1
    SUC             shift and go to state 4
    PRED            shift and go to state 3

    n                              shift and go to state 2

state 1

    (1) n -> NUM .

    $end            reduce using rule 1 (n -> NUM .)
    )               reduce using rule 1 (n -> NUM .)


state 2

    (0) S' -> n .



state 3

    (3) n -> PRED . ( n )

    (               shift and go to state 5


state 4

    (2) n -> SUC . ( n )

    (               shift and go to state 6


state 5

    (3) n -> PRED ( . n )
    (1) n -> . NUM
    (2) n -> . SUC ( n )
    (3) n -> . PRED ( n )

    NUM             shift and go to state 1
    SUC             shift and go to state 4
    PRED            shift and go to state 3

    n                              shift and go to state 7

state 6

    (2) n -> SUC ( . n )
    (1) n -> . NUM
    (2) n -> . SUC ( n )
    (3) n -> . PRED ( n )

    NUM             shift and go to state 1
    SUC             shift and go to state 4
    PRED            shift and go to state 3

    n                              shift and go to state 8

state 7

    (3) n -> PRED ( n . )

    )               shift and go to state 9


state 8

    (2) n -> SUC ( n . )

    )               shift and go to state 10


state 9

    (3) n -> PRED ( n ) .

    $end            reduce using rule 3 (n -> PRED ( n ) .)
    )               reduce using rule 3 (n -> PRED ( n ) .)


state 10

    (2) n -> SUC ( n ) .

    $end            reduce using rule 2 (n -> SUC ( n ) .)
    )               reduce using rule 2 (n -> SUC ( n ) .)

